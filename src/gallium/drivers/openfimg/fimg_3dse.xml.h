#ifndef FIMG_3DSE_XML
#define FIMG_3DSE_XML

/* Autogenerated file, DO NOT EDIT manually!

This file was generated by the rules-ng-ng headergen tool in this git repository:
http://github.com/freedreno/envytools/
git clone https://github.com/freedreno/envytools.git

The rules-ng-ng source files this header was generated from are:
- ./fimg_3dse.xml (  20052 bytes, from 2014-06-07 15:16:40)

Copyright (C) 2013-2014 by the following authors:
- Tomasz Figa <tomasz.figa@gmail.com> (t.figa)

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice (including the
next paragraph) shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/


enum fghi_attrib_dt {
	DT_BYTE = 0,
	DT_SHORT = 1,
	DT_INT = 2,
	DT_FIXED = 3,
	DT_UBYTE = 4,
	DT_USHORT = 5,
	DT_UINT = 6,
	DT_FLOAT = 7,
	DT_NBYTE = 8,
	DT_NSHORT = 9,
	DT_NINT = 10,
	DT_NFIXED = 11,
	DT_NUBYTE = 12,
	DT_NUSHORT = 13,
	DT_NUINT = 14,
	DT_HFLOAT = 15,
};

enum fgpe_vctx_ptype {
	PTYPE_POINT_SPRITE = 1,
	PTYPE_POINTS = 2,
	PTYPE_LINE_STRIP = 4,
	PTYPE_LINE_LOOP = 8,
	PTYPE_LINES = 16,
	PTYPE_TRIANGLE_STRIP = 32,
	PTYPE_TRIANGLE_FAN = 64,
	PTYPE_TRIANGLES = 128,
};

enum fgra_bfcull_face {
	FACE_BACK = 0,
	FACE_FRONT = 1,
	FACE_BOTH = 3,
};

enum fgra_coordreplace {
	CREP_ATTR0 = 1,
	CREP_ATTR1 = 2,
	CREP_ATTR2 = 4,
	CREP_ATTR3 = 8,
	CREP_ATTR4 = 16,
	CREP_ATTR5 = 32,
	CREP_ATTR6 = 64,
	CREP_ATTR7 = 128,
};

enum fgpf_test_mode {
	TEST_NEVER = 0,
	TEST_ALWAYS = 1,
	TEST_LESS = 2,
	TEST_LEQUAL = 3,
	TEST_EQUAL = 4,
	TEST_GREATER = 5,
	TEST_GEQUAL = 6,
	TEST_NOTEQUAL = 7,
};

enum fgpf_stencil_action {
	STENCIL_KEEP = 0,
	STENCIL_ZERO = 1,
	STENCIL_REPLACE = 2,
	STENCIL_INCR = 3,
	STENCIL_DECR = 4,
	STENCIL_INVERT = 5,
	STENCIL_INCR_WRAP = 6,
	STENCIL_DECR_WRAP = 7,
};

enum fgpf_blend_factor {
	BLEND_ZERO = 0,
	BLEND_ONE = 1,
	BLEND_SRC_COL = 2,
	BLEND_SRC_COL_INV = 3,
	BLEND_DST_COL = 4,
	BLEND_DST_COL_INV = 5,
	BLEND_SRC_ALP = 6,
	BLEND_SRC_ALP_INV = 7,
	BLEND_DST_ALP = 8,
	BLEND_DST_ALP_INV = 9,
	BLEND_CONST_COL = 10,
	BLEND_CONST_COL_INV = 11,
	BLEND_CONST_ALP = 12,
	BLEND_CONST_ALP_INV = 13,
	BLEND_SRC_ALP_SAT = 14,
};

enum fgpf_blend_op {
	BLEND_SRC_ADD_DST = 0,
	BLEND_SRC_SUB_DST = 1,
	BLEND_DST_SUB_SRC = 2,
	BLEND_MIN = 3,
	BLEND_MAX = 4,
};

enum fgpf_logical_op {
	LOGICAL_ZERO = 0,
	LOGICAL_SRC_AND_DST = 1,
	LOGICAL_SRC_AND_NOT_DST = 2,
	LOGICAL_SRC = 3,
	LOGICAL_NOT_SRC_AND_DST = 4,
	LOGICAL_DST = 5,
	LOGICAL_SRC_XOR_DST = 6,
	LOGICAL_SRC_OR_DST = 7,
	LOGICAL_SRC_NOR_DST = 8,
	LOGICAL_SRC_EQV_DST = 9,
	LOGICAL_NOT_DST = 10,
	LOGICAL_SRC_OR_NOT_DST = 11,
	LOGICAL_NOT_SRC = 12,
	LOGICAL_NOT_SRC_OR_DST = 13,
	LOGICAL_SRC_NAND_DST = 14,
	LOGICAL_ONE = 15,
};

enum fgpf_color_mode {
	COLOR_RGB555 = 0,
	COLOR_RGB565 = 1,
	COLOR_ARGB4444 = 2,
	COLOR_ARGB1555 = 3,
	COLOR_XRGB8888 = 4,
	COLOR_ARGB8888 = 5,
};

enum fgtu_tex_type {
	TEX_TYPE_2D = 1,
	TEX_TYPE_CUBE = 2,
	TEX_TYPE_3D = 3,
};

enum fgtu_pal_format {
	PAL_FORMAT_1555 = 0,
	PAL_FORMAT_565 = 1,
	PAL_FORMAT_4444 = 2,
	PAL_FORMAT_8888 = 3,
};

enum fgtu_tex_format {
	TEX_FMT_1555 = 0,
	TEX_FMT_565 = 1,
	TEX_FMT_4444 = 2,
	TEX_FMT_DEPTH16 = 3,
	TEX_FMT_88 = 4,
	TEX_FMT_8 = 5,
	TEX_FMT_8888 = 6,
	TEX_FMT_1BPP = 7,
	TEX_FMT_2BPP = 8,
	TEX_FMT_4BPP = 9,
	TEX_FMT_8BPP = 10,
	TEX_FMT_DXT1 = 11,
	TEX_FMT_Y1VY0U = 12,
	TEX_FMT_VY1UY0 = 13,
	TEX_FMT_Y1UY0V = 14,
	TEX_FMT_UY1VY0 = 15,
};

enum fgtu_addr_mode {
	ADDR_MODE_REPEAT = 0,
	ADDR_MODE_FLIP = 1,
	ADDR_MODE_CLAMP_TO_EDGE = 2,
};

enum fgtu_mipmap_mode {
	MIPMAP_DISABLED = 0,
	MIPMAP_NEAREST = 1,
	MIPMAP_LINEAR = 2,
};

enum instr_type {
	INSTR = 0,
	ALU = 0,
	CF = 0,
};

enum of_instr_src {
	OF_SRC_V = 0,
	OF_SRC_R = 1,
	OF_SRC_C = 2,
	OF_SRC_I = 3,
	OF_SRC_AL = 4,
	OF_SRC_B = 5,
	OF_SRC_P = 6,
	OF_SRC_S = 7,
	OF_SRC_D = 8,
	OF_SRC_VFACE = 9,
	OF_SRC_VPOS = 10,
};

enum of_instr_dst {
	OF_DST_O = 0,
	OF_DST_R = 1,
	OF_DST_P = 3,
	OF_DST_A0 = 4,
	OF_DST_AL = 5,
};

enum of_instr_opcode {
	OF_OP_NOP = 0,
	OF_OP_MOV = 1,
	OF_OP_MOVA = 2,
	OF_OP_MOVC = 3,
	OF_OP_ADD = 4,
	OF_OP_MUL = 6,
	OF_OP_MUL_LIT = 7,
	OF_OP_DP3 = 8,
	OF_OP_DP4 = 9,
	OF_OP_DPH = 10,
	OF_OP_DST = 11,
	OF_OP_EXP = 12,
	OF_OP_EXP_LIT = 13,
	OF_OP_LOG = 14,
	OF_OP_LOG_LIT = 15,
	OF_OP_RCP = 16,
	OF_OP_RSQ = 17,
	OF_OP_DP2ADD = 18,
	OF_OP_MAX = 20,
	OF_OP_MIN = 21,
	OF_OP_SGE = 22,
	OF_OP_SLT = 23,
	OF_OP_SETP_EQ = 24,
	OF_OP_SETP_GE = 25,
	OF_OP_SETP_GT = 26,
	OF_OP_SETP_NE = 27,
	OF_OP_CMP = 28,
	OF_OP_MAD = 29,
	OF_OP_FRC = 30,
	OF_OP_FLR = 31,
	OF_OP_TEXLD = 32,
	OF_OP_CUBEDIR = 33,
	OF_OP_MAXCOMP = 34,
	OF_OP_TEXLDC = 35,
	OF_OP_TEXKILL = 39,
	OF_OP_MOVIPS = 40,
	OF_OP_ADDI = 41,
	OF_OP_B = 48,
	OF_OP_BF = 49,
	OF_OP_BP = 52,
	OF_OP_BFP = 53,
	OF_OP_BZP = 54,
	OF_OP_CALL = 56,
	OF_OP_CALLNZ = 57,
	OF_OP_RET = 60,
};

#define FGRA_LODCTL_LOD						0x00000001
#define FGRA_LODCTL_DDX						0x00000002
#define FGRA_LODCTL_DDY						0x00000004

static inline uint32_t REG_FGHI_ATTRIB(uint32_t i0) { return 0x00000007 + 0x1*i0; }
#define FGHI_ATTRIB_SRCX__MASK					0x00000003
#define FGHI_ATTRIB_SRCX__SHIFT					0
static inline uint32_t FGHI_ATTRIB_SRCX(uint32_t val)
{
	return ((val) << FGHI_ATTRIB_SRCX__SHIFT) & FGHI_ATTRIB_SRCX__MASK;
}
#define FGHI_ATTRIB_SRCY__MASK					0x0000000c
#define FGHI_ATTRIB_SRCY__SHIFT					2
static inline uint32_t FGHI_ATTRIB_SRCY(uint32_t val)
{
	return ((val) << FGHI_ATTRIB_SRCY__SHIFT) & FGHI_ATTRIB_SRCY__MASK;
}
#define FGHI_ATTRIB_SRCZ__MASK					0x00000030
#define FGHI_ATTRIB_SRCZ__SHIFT					4
static inline uint32_t FGHI_ATTRIB_SRCZ(uint32_t val)
{
	return ((val) << FGHI_ATTRIB_SRCZ__SHIFT) & FGHI_ATTRIB_SRCZ__MASK;
}
#define FGHI_ATTRIB_SRCW__MASK					0x000000c0
#define FGHI_ATTRIB_SRCW__SHIFT					6
static inline uint32_t FGHI_ATTRIB_SRCW(uint32_t val)
{
	return ((val) << FGHI_ATTRIB_SRCW__SHIFT) & FGHI_ATTRIB_SRCW__MASK;
}
#define FGHI_ATTRIB_NUM_COMP__MASK				0x00000300
#define FGHI_ATTRIB_NUM_COMP__SHIFT				8
static inline uint32_t FGHI_ATTRIB_NUM_COMP(uint32_t val)
{
	return ((val) << FGHI_ATTRIB_NUM_COMP__SHIFT) & FGHI_ATTRIB_NUM_COMP__MASK;
}
#define FGHI_ATTRIB_DT__MASK					0x0000f000
#define FGHI_ATTRIB_DT__SHIFT					12
static inline uint32_t FGHI_ATTRIB_DT(enum fghi_attrib_dt val)
{
	return ((val) << FGHI_ATTRIB_DT__SHIFT) & FGHI_ATTRIB_DT__MASK;
}
#define FGHI_ATTRIB_LAST_ATTR					0x80000000


static inline uint32_t REG_FGHI_ATTRIB_VBCTRL(uint32_t i0) { return 0x00000011 + 0x1*i0; }
#define FGHI_ATTRIB_VBCTRL_RANGE__MASK				0x0000ffff
#define FGHI_ATTRIB_VBCTRL_RANGE__SHIFT				0
static inline uint32_t FGHI_ATTRIB_VBCTRL_RANGE(uint32_t val)
{
	return ((val) << FGHI_ATTRIB_VBCTRL_RANGE__SHIFT) & FGHI_ATTRIB_VBCTRL_RANGE__MASK;
}
#define FGHI_ATTRIB_VBCTRL_STRIDE__MASK				0xff000000
#define FGHI_ATTRIB_VBCTRL_STRIDE__SHIFT			24
static inline uint32_t FGHI_ATTRIB_VBCTRL_STRIDE(uint32_t val)
{
	return ((val) << FGHI_ATTRIB_VBCTRL_STRIDE__SHIFT) & FGHI_ATTRIB_VBCTRL_STRIDE__MASK;
}


static inline uint32_t REG_FGHI_ATTRIB_VBBASE(uint32_t i0) { return 0x0000001b + 0x1*i0; }
#define FGHI_ATTRIB_VBBASE_ADDR__MASK				0x0000ffff
#define FGHI_ATTRIB_VBBASE_ADDR__SHIFT				0
static inline uint32_t FGHI_ATTRIB_VBBASE_ADDR(uint32_t val)
{
	return ((val) << FGHI_ATTRIB_VBBASE_ADDR__SHIFT) & FGHI_ATTRIB_VBBASE_ADDR__MASK;
}

#define REG_FGPE_VERTEX_CONTEXT					0x00000025
#define FGPE_VERTEX_CONTEXT_TYPE__MASK				0x07f80000
#define FGPE_VERTEX_CONTEXT_TYPE__SHIFT				19
static inline uint32_t FGPE_VERTEX_CONTEXT_TYPE(enum fgpe_vctx_ptype val)
{
	return ((val) << FGPE_VERTEX_CONTEXT_TYPE__SHIFT) & FGPE_VERTEX_CONTEXT_TYPE__MASK;
}
#define FGPE_VERTEX_CONTEXT_VS_POINT_SIZE			0x00040000
#define FGPE_VERTEX_CONTEXT_VSOUT__MASK				0x00003c00
#define FGPE_VERTEX_CONTEXT_VSOUT__SHIFT			10
static inline uint32_t FGPE_VERTEX_CONTEXT_VSOUT(uint32_t val)
{
	return ((val) << FGPE_VERTEX_CONTEXT_VSOUT__SHIFT) & FGPE_VERTEX_CONTEXT_VSOUT__MASK;
}
#define FGPE_VERTEX_CONTEXT_FLAT_SHADE				0x00000200
#define FGPE_VERTEX_CONTEXT_FLAT_MODEL__MASK			0x000001ff
#define FGPE_VERTEX_CONTEXT_FLAT_MODEL__SHIFT			0
static inline uint32_t FGPE_VERTEX_CONTEXT_FLAT_MODEL(uint32_t val)
{
	return ((val) << FGPE_VERTEX_CONTEXT_FLAT_MODEL__SHIFT) & FGPE_VERTEX_CONTEXT_FLAT_MODEL__MASK;
}

#define REG_FGPE_VIEWPORT_OX					0x00000026
#define FGPE_VIEWPORT_OX__MASK					0xffffffff
#define FGPE_VIEWPORT_OX__SHIFT					0
static inline uint32_t FGPE_VIEWPORT_OX(float val)
{
	return ((fui(val)) << FGPE_VIEWPORT_OX__SHIFT) & FGPE_VIEWPORT_OX__MASK;
}

#define REG_FGPE_VIEWPORT_OY					0x00000027
#define FGPE_VIEWPORT_OY__MASK					0xffffffff
#define FGPE_VIEWPORT_OY__SHIFT					0
static inline uint32_t FGPE_VIEWPORT_OY(float val)
{
	return ((fui(val)) << FGPE_VIEWPORT_OY__SHIFT) & FGPE_VIEWPORT_OY__MASK;
}

#define REG_FGPE_VIEWPORT_HALF_PX				0x00000028
#define FGPE_VIEWPORT_HALF_PX__MASK				0xffffffff
#define FGPE_VIEWPORT_HALF_PX__SHIFT				0
static inline uint32_t FGPE_VIEWPORT_HALF_PX(float val)
{
	return ((fui(val)) << FGPE_VIEWPORT_HALF_PX__SHIFT) & FGPE_VIEWPORT_HALF_PX__MASK;
}

#define REG_FGPE_VIEWPORT_HALF_PY				0x00000029
#define FGPE_VIEWPORT_HALF_PY__MASK				0xffffffff
#define FGPE_VIEWPORT_HALF_PY__SHIFT				0
static inline uint32_t FGPE_VIEWPORT_HALF_PY(float val)
{
	return ((fui(val)) << FGPE_VIEWPORT_HALF_PY__SHIFT) & FGPE_VIEWPORT_HALF_PY__MASK;
}

#define REG_FGPE_DEPTHRANGE_HALF_F_SUB_N			0x0000002a
#define FGPE_DEPTHRANGE_HALF_F_SUB_N__MASK			0xffffffff
#define FGPE_DEPTHRANGE_HALF_F_SUB_N__SHIFT			0
static inline uint32_t FGPE_DEPTHRANGE_HALF_F_SUB_N(float val)
{
	return ((fui(val)) << FGPE_DEPTHRANGE_HALF_F_SUB_N__SHIFT) & FGPE_DEPTHRANGE_HALF_F_SUB_N__MASK;
}

#define REG_FGPE_DEPTHRANGE_HALF_F_ADD_N			0x0000002b
#define FGPE_DEPTHRANGE_HALF_F_ADD_N__MASK			0xffffffff
#define FGPE_DEPTHRANGE_HALF_F_ADD_N__SHIFT			0
static inline uint32_t FGPE_DEPTHRANGE_HALF_F_ADD_N(float val)
{
	return ((fui(val)) << FGPE_DEPTHRANGE_HALF_F_ADD_N__SHIFT) & FGPE_DEPTHRANGE_HALF_F_ADD_N__MASK;
}

#define REG_FGRA_PIX_SAMP					0x0000002c
#define FGRA_PIX_SAMP_PIX_CORNER_SAMP				0x00000001

#define REG_FGRA_D_OFF_EN					0x0000002d
#define FGRA_D_OFF_EN_ENABLE					0x00000001

#define REG_FGRA_D_OFF_FACTOR					0x0000002e
#define FGRA_D_OFF_FACTOR__MASK					0xffffffff
#define FGRA_D_OFF_FACTOR__SHIFT				0
static inline uint32_t FGRA_D_OFF_FACTOR(float val)
{
	return ((fui(val)) << FGRA_D_OFF_FACTOR__SHIFT) & FGRA_D_OFF_FACTOR__MASK;
}

#define REG_FGRA_D_OFF_UNITS					0x0000002f
#define FGRA_D_OFF_UNITS__MASK					0xffffffff
#define FGRA_D_OFF_UNITS__SHIFT					0
static inline uint32_t FGRA_D_OFF_UNITS(float val)
{
	return ((fui(val)) << FGRA_D_OFF_UNITS__SHIFT) & FGRA_D_OFF_UNITS__MASK;
}

#define REG_FGRA_BFCULL						0x00000030
#define FGRA_BFCULL_FACE__MASK					0x00000003
#define FGRA_BFCULL_FACE__SHIFT					0
static inline uint32_t FGRA_BFCULL_FACE(enum fgra_bfcull_face val)
{
	return ((val) << FGRA_BFCULL_FACE__SHIFT) & FGRA_BFCULL_FACE__MASK;
}
#define FGRA_BFCULL_FRONT_CW					0x00000004
#define FGRA_BFCULL_ENABLE					0x00000008

#define REG_FGRA_YCLIP						0x00000031
#define FGRA_YCLIP_MIN_VAL__MASK				0x00000fff
#define FGRA_YCLIP_MIN_VAL__SHIFT				0
static inline uint32_t FGRA_YCLIP_MIN_VAL(uint32_t val)
{
	return ((val) << FGRA_YCLIP_MIN_VAL__SHIFT) & FGRA_YCLIP_MIN_VAL__MASK;
}
#define FGRA_YCLIP_MAX_VAL__MASK				0x0fff0000
#define FGRA_YCLIP_MAX_VAL__SHIFT				16
static inline uint32_t FGRA_YCLIP_MAX_VAL(uint32_t val)
{
	return ((val) << FGRA_YCLIP_MAX_VAL__SHIFT) & FGRA_YCLIP_MAX_VAL__MASK;
}

#define REG_FGRA_LODCTL						0x00000032
#define FGRA_LODCTL_LOD_CON0__MASK				0x00000007
#define FGRA_LODCTL_LOD_CON0__SHIFT				0
static inline uint32_t FGRA_LODCTL_LOD_CON0(uint32_t val)
{
	return ((val) << FGRA_LODCTL_LOD_CON0__SHIFT) & FGRA_LODCTL_LOD_CON0__MASK;
}
#define FGRA_LODCTL_LOD_CON1__MASK				0x00000038
#define FGRA_LODCTL_LOD_CON1__SHIFT				3
static inline uint32_t FGRA_LODCTL_LOD_CON1(uint32_t val)
{
	return ((val) << FGRA_LODCTL_LOD_CON1__SHIFT) & FGRA_LODCTL_LOD_CON1__MASK;
}
#define FGRA_LODCTL_LOD_CON2__MASK				0x000001c0
#define FGRA_LODCTL_LOD_CON2__SHIFT				6
static inline uint32_t FGRA_LODCTL_LOD_CON2(uint32_t val)
{
	return ((val) << FGRA_LODCTL_LOD_CON2__SHIFT) & FGRA_LODCTL_LOD_CON2__MASK;
}
#define FGRA_LODCTL_LOD_CON3__MASK				0x00000e00
#define FGRA_LODCTL_LOD_CON3__SHIFT				9
static inline uint32_t FGRA_LODCTL_LOD_CON3(uint32_t val)
{
	return ((val) << FGRA_LODCTL_LOD_CON3__SHIFT) & FGRA_LODCTL_LOD_CON3__MASK;
}
#define FGRA_LODCTL_LOD_CON4__MASK				0x00007000
#define FGRA_LODCTL_LOD_CON4__SHIFT				12
static inline uint32_t FGRA_LODCTL_LOD_CON4(uint32_t val)
{
	return ((val) << FGRA_LODCTL_LOD_CON4__SHIFT) & FGRA_LODCTL_LOD_CON4__MASK;
}
#define FGRA_LODCTL_LOD_CON5__MASK				0x00038000
#define FGRA_LODCTL_LOD_CON5__SHIFT				15
static inline uint32_t FGRA_LODCTL_LOD_CON5(uint32_t val)
{
	return ((val) << FGRA_LODCTL_LOD_CON5__SHIFT) & FGRA_LODCTL_LOD_CON5__MASK;
}
#define FGRA_LODCTL_LOD_CON6__MASK				0x001c0000
#define FGRA_LODCTL_LOD_CON6__SHIFT				18
static inline uint32_t FGRA_LODCTL_LOD_CON6(uint32_t val)
{
	return ((val) << FGRA_LODCTL_LOD_CON6__SHIFT) & FGRA_LODCTL_LOD_CON6__MASK;
}
#define FGRA_LODCTL_LOD_CON7__MASK				0x00e00000
#define FGRA_LODCTL_LOD_CON7__SHIFT				21
static inline uint32_t FGRA_LODCTL_LOD_CON7(uint32_t val)
{
	return ((val) << FGRA_LODCTL_LOD_CON7__SHIFT) & FGRA_LODCTL_LOD_CON7__MASK;
}

#define REG_FGRA_XCLIP						0x00000033
#define FGRA_XCLIP_MIN_VAL__MASK				0x00000fff
#define FGRA_XCLIP_MIN_VAL__SHIFT				0
static inline uint32_t FGRA_XCLIP_MIN_VAL(uint32_t val)
{
	return ((val) << FGRA_XCLIP_MIN_VAL__SHIFT) & FGRA_XCLIP_MIN_VAL__MASK;
}
#define FGRA_XCLIP_MAX_VAL__MASK				0x0fff0000
#define FGRA_XCLIP_MAX_VAL__SHIFT				16
static inline uint32_t FGRA_XCLIP_MAX_VAL(uint32_t val)
{
	return ((val) << FGRA_XCLIP_MAX_VAL__SHIFT) & FGRA_XCLIP_MAX_VAL__MASK;
}

#define REG_FGRA_PWIDTH						0x00000034
#define FGRA_PWIDTH__MASK					0xffffffff
#define FGRA_PWIDTH__SHIFT					0
static inline uint32_t FGRA_PWIDTH(float val)
{
	return ((fui(val)) << FGRA_PWIDTH__SHIFT) & FGRA_PWIDTH__MASK;
}

#define REG_FGRA_PSIZE_MIN					0x00000035
#define FGRA_PSIZE_MIN__MASK					0xffffffff
#define FGRA_PSIZE_MIN__SHIFT					0
static inline uint32_t FGRA_PSIZE_MIN(float val)
{
	return ((fui(val)) << FGRA_PSIZE_MIN__SHIFT) & FGRA_PSIZE_MIN__MASK;
}

#define REG_FGRA_PSIZE_MAX					0x00000036
#define FGRA_PSIZE_MAX__MASK					0xffffffff
#define FGRA_PSIZE_MAX__SHIFT					0
static inline uint32_t FGRA_PSIZE_MAX(float val)
{
	return ((fui(val)) << FGRA_PSIZE_MAX__SHIFT) & FGRA_PSIZE_MAX__MASK;
}

#define REG_FGRA_COORDREPLACE					0x00000037
#define FGRA_COORDREPLACE_ATTR__MASK				0x000000ff
#define FGRA_COORDREPLACE_ATTR__SHIFT				0
static inline uint32_t FGRA_COORDREPLACE_ATTR(enum fgra_coordreplace val)
{
	return ((val) << FGRA_COORDREPLACE_ATTR__SHIFT) & FGRA_COORDREPLACE_ATTR__MASK;
}

#define REG_FGRA_LWIDTH						0x00000038
#define FGRA_LWIDTH__MASK					0xffffffff
#define FGRA_LWIDTH__SHIFT					0
static inline uint32_t FGRA_LWIDTH(float val)
{
	return ((fui(val)) << FGRA_LWIDTH__SHIFT) & FGRA_LWIDTH__MASK;
}

#define REG_FGPF_ALPHAT						0x00000039
#define FGPF_ALPHAT_ENABLE					0x00000001
#define FGPF_ALPHAT_MODE__MASK					0x0000000e
#define FGPF_ALPHAT_MODE__SHIFT					1
static inline uint32_t FGPF_ALPHAT_MODE(enum fgpf_test_mode val)
{
	return ((val) << FGPF_ALPHAT_MODE__SHIFT) & FGPF_ALPHAT_MODE__MASK;
}
#define FGPF_ALPHAT_VALUE__MASK					0x00000ff0
#define FGPF_ALPHAT_VALUE__SHIFT				4
static inline uint32_t FGPF_ALPHAT_VALUE(uint32_t val)
{
	return ((val) << FGPF_ALPHAT_VALUE__SHIFT) & FGPF_ALPHAT_VALUE__MASK;
}

#define REG_FGPF_FRONTST					0x00000000
#define FGPF_FRONTST_ENABLE					0x00000001
#define FGPF_FRONTST_MODE__MASK					0x0000000e
#define FGPF_FRONTST_MODE__SHIFT				1
static inline uint32_t FGPF_FRONTST_MODE(enum fgpf_test_mode val)
{
	return ((val) << FGPF_FRONTST_MODE__SHIFT) & FGPF_FRONTST_MODE__MASK;
}
#define FGPF_FRONTST_VALUE__MASK				0x00000ff0
#define FGPF_FRONTST_VALUE__SHIFT				4
static inline uint32_t FGPF_FRONTST_VALUE(uint32_t val)
{
	return ((val) << FGPF_FRONTST_VALUE__SHIFT) & FGPF_FRONTST_VALUE__MASK;
}
#define FGPF_FRONTST_MASK__MASK					0x000ff000
#define FGPF_FRONTST_MASK__SHIFT				12
static inline uint32_t FGPF_FRONTST_MASK(uint32_t val)
{
	return ((val) << FGPF_FRONTST_MASK__SHIFT) & FGPF_FRONTST_MASK__MASK;
}
#define FGPF_FRONTST_SFAIL__MASK				0x03800000
#define FGPF_FRONTST_SFAIL__SHIFT				23
static inline uint32_t FGPF_FRONTST_SFAIL(enum fgpf_stencil_action val)
{
	return ((val) << FGPF_FRONTST_SFAIL__SHIFT) & FGPF_FRONTST_SFAIL__MASK;
}
#define FGPF_FRONTST_DPFAIL__MASK				0x1c000000
#define FGPF_FRONTST_DPFAIL__SHIFT				26
static inline uint32_t FGPF_FRONTST_DPFAIL(enum fgpf_stencil_action val)
{
	return ((val) << FGPF_FRONTST_DPFAIL__SHIFT) & FGPF_FRONTST_DPFAIL__MASK;
}
#define FGPF_FRONTST_DPPASS__MASK				0xe0000000
#define FGPF_FRONTST_DPPASS__SHIFT				29
static inline uint32_t FGPF_FRONTST_DPPASS(enum fgpf_stencil_action val)
{
	return ((val) << FGPF_FRONTST_DPPASS__SHIFT) & FGPF_FRONTST_DPPASS__MASK;
}

#define REG_FGPF_BACKST						0x0000003a
#define FGPF_BACKST_MODE__MASK					0x0000000e
#define FGPF_BACKST_MODE__SHIFT					1
static inline uint32_t FGPF_BACKST_MODE(enum fgpf_test_mode val)
{
	return ((val) << FGPF_BACKST_MODE__SHIFT) & FGPF_BACKST_MODE__MASK;
}
#define FGPF_BACKST_VALUE__MASK					0x00000ff0
#define FGPF_BACKST_VALUE__SHIFT				4
static inline uint32_t FGPF_BACKST_VALUE(uint32_t val)
{
	return ((val) << FGPF_BACKST_VALUE__SHIFT) & FGPF_BACKST_VALUE__MASK;
}
#define FGPF_BACKST_MASK__MASK					0x000ff000
#define FGPF_BACKST_MASK__SHIFT					12
static inline uint32_t FGPF_BACKST_MASK(uint32_t val)
{
	return ((val) << FGPF_BACKST_MASK__SHIFT) & FGPF_BACKST_MASK__MASK;
}
#define FGPF_BACKST_SFAIL__MASK					0x03800000
#define FGPF_BACKST_SFAIL__SHIFT				23
static inline uint32_t FGPF_BACKST_SFAIL(enum fgpf_stencil_action val)
{
	return ((val) << FGPF_BACKST_SFAIL__SHIFT) & FGPF_BACKST_SFAIL__MASK;
}
#define FGPF_BACKST_DPFAIL__MASK				0x1c000000
#define FGPF_BACKST_DPFAIL__SHIFT				26
static inline uint32_t FGPF_BACKST_DPFAIL(enum fgpf_stencil_action val)
{
	return ((val) << FGPF_BACKST_DPFAIL__SHIFT) & FGPF_BACKST_DPFAIL__MASK;
}
#define FGPF_BACKST_DPPASS__MASK				0xe0000000
#define FGPF_BACKST_DPPASS__SHIFT				29
static inline uint32_t FGPF_BACKST_DPPASS(enum fgpf_stencil_action val)
{
	return ((val) << FGPF_BACKST_DPPASS__SHIFT) & FGPF_BACKST_DPPASS__MASK;
}

#define REG_FGPF_DEPTHT						0x00000001
#define FGPF_DEPTHT_ENABLE					0x00000001
#define FGPF_DEPTHT_MODE__MASK					0x0000000e
#define FGPF_DEPTHT_MODE__SHIFT					1
static inline uint32_t FGPF_DEPTHT_MODE(enum fgpf_test_mode val)
{
	return ((val) << FGPF_DEPTHT_MODE__SHIFT) & FGPF_DEPTHT_MODE__MASK;
}

#define REG_FGPF_CCLR						0x0000003b

#define REG_FGPF_BLEND						0x0000003c
#define FGPF_BLEND_ENABLE					0x00000001
#define FGPF_BLEND_COLOR_SRC_FUNC__MASK				0x0000001e
#define FGPF_BLEND_COLOR_SRC_FUNC__SHIFT			1
static inline uint32_t FGPF_BLEND_COLOR_SRC_FUNC(enum fgpf_blend_factor val)
{
	return ((val) << FGPF_BLEND_COLOR_SRC_FUNC__SHIFT) & FGPF_BLEND_COLOR_SRC_FUNC__MASK;
}
#define FGPF_BLEND_ALPHA_SRC_FUNC__MASK				0x000001e0
#define FGPF_BLEND_ALPHA_SRC_FUNC__SHIFT			5
static inline uint32_t FGPF_BLEND_ALPHA_SRC_FUNC(enum fgpf_blend_factor val)
{
	return ((val) << FGPF_BLEND_ALPHA_SRC_FUNC__SHIFT) & FGPF_BLEND_ALPHA_SRC_FUNC__MASK;
}
#define FGPF_BLEND_COLOR_DST_FUNC__MASK				0x00001e00
#define FGPF_BLEND_COLOR_DST_FUNC__SHIFT			9
static inline uint32_t FGPF_BLEND_COLOR_DST_FUNC(enum fgpf_blend_factor val)
{
	return ((val) << FGPF_BLEND_COLOR_DST_FUNC__SHIFT) & FGPF_BLEND_COLOR_DST_FUNC__MASK;
}
#define FGPF_BLEND_ALPHA_DST_FUNC__MASK				0x0001e000
#define FGPF_BLEND_ALPHA_DST_FUNC__SHIFT			13
static inline uint32_t FGPF_BLEND_ALPHA_DST_FUNC(enum fgpf_blend_factor val)
{
	return ((val) << FGPF_BLEND_ALPHA_DST_FUNC__SHIFT) & FGPF_BLEND_ALPHA_DST_FUNC__MASK;
}
#define FGPF_BLEND_COLOR_EQUATION__MASK				0x000e0000
#define FGPF_BLEND_COLOR_EQUATION__SHIFT			17
static inline uint32_t FGPF_BLEND_COLOR_EQUATION(enum fgpf_blend_op val)
{
	return ((val) << FGPF_BLEND_COLOR_EQUATION__SHIFT) & FGPF_BLEND_COLOR_EQUATION__MASK;
}
#define FGPF_BLEND_ALPHA_EQUATION__MASK				0x00700000
#define FGPF_BLEND_ALPHA_EQUATION__SHIFT			20
static inline uint32_t FGPF_BLEND_ALPHA_EQUATION(enum fgpf_blend_op val)
{
	return ((val) << FGPF_BLEND_ALPHA_EQUATION__SHIFT) & FGPF_BLEND_ALPHA_EQUATION__MASK;
}

#define REG_FGPF_LOGOP						0x0000003d
#define FGPF_LOGOP_ENABLE					0x00000001
#define FGPF_LOGOP_COLOR_OP__MASK				0x0000001e
#define FGPF_LOGOP_COLOR_OP__SHIFT				1
static inline uint32_t FGPF_LOGOP_COLOR_OP(enum fgpf_logical_op val)
{
	return ((val) << FGPF_LOGOP_COLOR_OP__SHIFT) & FGPF_LOGOP_COLOR_OP__MASK;
}
#define FGPF_LOGOP_ALPHA_OP__MASK				0x000001e0
#define FGPF_LOGOP_ALPHA_OP__SHIFT				5
static inline uint32_t FGPF_LOGOP_ALPHA_OP(enum fgpf_logical_op val)
{
	return ((val) << FGPF_LOGOP_ALPHA_OP__SHIFT) & FGPF_LOGOP_ALPHA_OP__MASK;
}

#define REG_FGPF_CBMSK						0x0000003e
#define FGPF_CBMSK_ALPHA					0x00000001
#define FGPF_CBMSK_BLUE						0x00000002
#define FGPF_CBMSK_GREEN					0x00000004
#define FGPF_CBMSK_RED						0x00000008

#define REG_FGPF_DBMSK						0x00000002
#define FGPF_DBMSK_DEPTH_MASK					0x00000001
#define FGPF_DBMSK_FRONT_STENCIL_MASK__MASK			0x00ff0000
#define FGPF_DBMSK_FRONT_STENCIL_MASK__SHIFT			16
static inline uint32_t FGPF_DBMSK_FRONT_STENCIL_MASK(uint32_t val)
{
	return ((val) << FGPF_DBMSK_FRONT_STENCIL_MASK__SHIFT) & FGPF_DBMSK_FRONT_STENCIL_MASK__MASK;
}
#define FGPF_DBMSK_BACK_STENCIL_MASK__MASK			0xff000000
#define FGPF_DBMSK_BACK_STENCIL_MASK__SHIFT			24
static inline uint32_t FGPF_DBMSK_BACK_STENCIL_MASK(uint32_t val)
{
	return ((val) << FGPF_DBMSK_BACK_STENCIL_MASK__SHIFT) & FGPF_DBMSK_BACK_STENCIL_MASK__MASK;
}

#define REG_FGPF_FBCTL						0x00000003
#define FGPF_FBCTL_COLOR_MODE__MASK				0x00000007
#define FGPF_FBCTL_COLOR_MODE__SHIFT				0
static inline uint32_t FGPF_FBCTL_COLOR_MODE(enum fgpf_color_mode val)
{
	return ((val) << FGPF_FBCTL_COLOR_MODE__SHIFT) & FGPF_FBCTL_COLOR_MODE__MASK;
}
#define FGPF_FBCTL_DITHER_ON					0x00000008
#define FGPF_FBCTL_ALPHA_CONST__MASK				0x00000ff0
#define FGPF_FBCTL_ALPHA_CONST__SHIFT				4
static inline uint32_t FGPF_FBCTL_ALPHA_CONST(uint32_t val)
{
	return ((val) << FGPF_FBCTL_ALPHA_CONST__SHIFT) & FGPF_FBCTL_ALPHA_CONST__MASK;
}
#define FGPF_FBCTL_ALPHA_THRESHOLD__MASK			0x000ff000
#define FGPF_FBCTL_ALPHA_THRESHOLD__SHIFT			12
static inline uint32_t FGPF_FBCTL_ALPHA_THRESHOLD(uint32_t val)
{
	return ((val) << FGPF_FBCTL_ALPHA_THRESHOLD__SHIFT) & FGPF_FBCTL_ALPHA_THRESHOLD__MASK;
}
#define FGPF_FBCTL_OPAQUE_ALPHA					0x00100000

#define REG_TSTA						0x00000000
#define TSTA_MIPMAP_EN__MASK					0x00000003
#define TSTA_MIPMAP_EN__SHIFT					0
static inline uint32_t TSTA_MIPMAP_EN(enum fgtu_mipmap_mode val)
{
	return ((val) << TSTA_MIPMAP_EN__SHIFT) & TSTA_MIPMAP_EN__MASK;
}
#define TSTA_TEX_FLT_EN						0x00000004
#define TSTA_MAG_FILTER						0x00000008
#define TSTA_NON_PARAMETRIC					0x00000010
#define TSTA_PADDR_MODE__MASK					0x000000c0
#define TSTA_PADDR_MODE__SHIFT					6
static inline uint32_t TSTA_PADDR_MODE(enum fgtu_addr_mode val)
{
	return ((val) << TSTA_PADDR_MODE__SHIFT) & TSTA_PADDR_MODE__MASK;
}
#define TSTA_VADDR_MODE__MASK					0x00000300
#define TSTA_VADDR_MODE__SHIFT					8
static inline uint32_t TSTA_VADDR_MODE(enum fgtu_addr_mode val)
{
	return ((val) << TSTA_VADDR_MODE__SHIFT) & TSTA_VADDR_MODE__MASK;
}
#define TSTA_UADDR_MODE__MASK					0x00000c00
#define TSTA_UADDR_MODE__SHIFT					10
static inline uint32_t TSTA_UADDR_MODE(enum fgtu_addr_mode val)
{
	return ((val) << TSTA_UADDR_MODE__SHIFT) & TSTA_UADDR_MODE__MASK;
}
#define TSTA_FORMAT__MASK					0x0001f000
#define TSTA_FORMAT__SHIFT					12
static inline uint32_t TSTA_FORMAT(enum fgtu_tex_format val)
{
	return ((val) << TSTA_FORMAT__SHIFT) & TSTA_FORMAT__MASK;
}
#define TSTA_PAL_FMT__MASK					0x00060000
#define TSTA_PAL_FMT__SHIFT					17
static inline uint32_t TSTA_PAL_FMT(enum fgtu_pal_format val)
{
	return ((val) << TSTA_PAL_FMT__SHIFT) & TSTA_PAL_FMT__MASK;
}
#define TSTA_RGBA						0x00080000
#define TSTA_ZERO_PAD						0x00100000
#define TSTA_CK_EN						0x00200000
#define TSTA_CK2						0x00400000
#define TSTA_TYPE__MASK						0x18000000
#define TSTA_TYPE__SHIFT					27
static inline uint32_t TSTA_TYPE(enum fgtu_tex_type val)
{
	return ((val) << TSTA_TYPE__SHIFT) & TSTA_TYPE__MASK;
}

#define REG_USIZE						0x00000001

#define REG_VSIZE						0x00000002

#define REG_PSIZE						0x00000003


static inline uint32_t REG_TOFFS(uint32_t i0) { return 0x00000004 + 0x1*i0; }

#define REG_MIN_L						0x0000000f

#define REG_MAX_L						0x00000010

#define REG_VTSTA						0x00000000
#define VTSTA_VSIZE__MASK					0x0000000f
#define VTSTA_VSIZE__SHIFT					0
static inline uint32_t VTSTA_VSIZE(uint32_t val)
{
	return ((val) << VTSTA_VSIZE__SHIFT) & VTSTA_VSIZE__MASK;
}
#define VTSTA_USIZE__MASK					0x000000f0
#define VTSTA_USIZE__SHIFT					4
static inline uint32_t VTSTA_USIZE(uint32_t val)
{
	return ((val) << VTSTA_USIZE__SHIFT) & VTSTA_USIZE__MASK;
}
#define VTSTA_VMOD__MASK					0x00000300
#define VTSTA_VMOD__SHIFT					8
static inline uint32_t VTSTA_VMOD(enum fgtu_addr_mode val)
{
	return ((val) << VTSTA_VMOD__SHIFT) & VTSTA_VMOD__MASK;
}
#define VTSTA_UMOD__MASK					0x00000c00
#define VTSTA_UMOD__SHIFT					10
static inline uint32_t VTSTA_UMOD(enum fgtu_addr_mode val)
{
	return ((val) << VTSTA_UMOD__SHIFT) & VTSTA_UMOD__MASK;
}

#define REG_INSTR_WORD0						0x00000000
#define ALU_WORD0_SRC2_NUM__MASK				0x0000001f
#define ALU_WORD0_SRC2_NUM__SHIFT				0
static inline uint32_t ALU_WORD0_SRC2_NUM(uint32_t val)
{
	return ((val) << ALU_WORD0_SRC2_NUM__SHIFT) & ALU_WORD0_SRC2_NUM__MASK;
}
#define ALU_WORD0_SRC2_TYPE__MASK				0x00000700
#define ALU_WORD0_SRC2_TYPE__SHIFT				8
static inline uint32_t ALU_WORD0_SRC2_TYPE(enum of_instr_src val)
{
	return ((val) << ALU_WORD0_SRC2_TYPE__SHIFT) & ALU_WORD0_SRC2_TYPE__MASK;
}
#define ALU_WORD0_SRC2_AR					0x00000800
#define ALU_WORD0_SRC2_NEGATE					0x00004000
#define ALU_WORD0_SRC2_ABS					0x00008000
#define ALU_WORD0_SRC2_SWIZZLE__MASK				0x00ff0000
#define ALU_WORD0_SRC2_SWIZZLE__SHIFT				16
static inline uint32_t ALU_WORD0_SRC2_SWIZZLE(uint32_t val)
{
	return ((val) << ALU_WORD0_SRC2_SWIZZLE__SHIFT) & ALU_WORD0_SRC2_SWIZZLE__MASK;
}
#define ALU_WORD0_SRC1_NUM__MASK				0x1f000000
#define ALU_WORD0_SRC1_NUM__SHIFT				24
static inline uint32_t ALU_WORD0_SRC1_NUM(uint32_t val)
{
	return ((val) << ALU_WORD0_SRC1_NUM__SHIFT) & ALU_WORD0_SRC1_NUM__MASK;
}
#define ALU_WORD0_PRED_CHANNEL__MASK				0x60000000
#define ALU_WORD0_PRED_CHANNEL__SHIFT				29
static inline uint32_t ALU_WORD0_PRED_CHANNEL(uint32_t val)
{
	return ((val) << ALU_WORD0_PRED_CHANNEL__SHIFT) & ALU_WORD0_PRED_CHANNEL__MASK;
}
#define ALU_WORD0_PRED_UNKNOWN					0x80000000

#define REG_INSTR_WORD1						0x00000001
#define ALU_WORD1_SRC1_TYPE__MASK				0x00000007
#define ALU_WORD1_SRC1_TYPE__SHIFT				0
static inline uint32_t ALU_WORD1_SRC1_TYPE(enum of_instr_src val)
{
	return ((val) << ALU_WORD1_SRC1_TYPE__SHIFT) & ALU_WORD1_SRC1_TYPE__MASK;
}
#define ALU_WORD1_SRC1_AR					0x00000008
#define ALU_WORD1_PRED_NEGATE					0x00000010
#define ALU_WORD1_PRED_ENABLE					0x00000020
#define ALU_WORD1_SRC1_NEGATE					0x00000040
#define ALU_WORD1_SRC1_ABS					0x00000080
#define ALU_WORD1_SRC1_SWIZZLE__MASK				0x0000ff00
#define ALU_WORD1_SRC1_SWIZZLE__SHIFT				8
static inline uint32_t ALU_WORD1_SRC1_SWIZZLE(uint32_t val)
{
	return ((val) << ALU_WORD1_SRC1_SWIZZLE__SHIFT) & ALU_WORD1_SRC1_SWIZZLE__MASK;
}
#define INSTR_WORD1_SRC0_NUM__MASK				0x001f0000
#define INSTR_WORD1_SRC0_NUM__SHIFT				16
static inline uint32_t INSTR_WORD1_SRC0_NUM(uint32_t val)
{
	return ((val) << INSTR_WORD1_SRC0_NUM__SHIFT) & INSTR_WORD1_SRC0_NUM__MASK;
}
#define INSTR_WORD1_SRC_EXTNUM__MASK				0x00e00000
#define INSTR_WORD1_SRC_EXTNUM__SHIFT				21
static inline uint32_t INSTR_WORD1_SRC_EXTNUM(uint32_t val)
{
	return ((val) << INSTR_WORD1_SRC_EXTNUM__SHIFT) & INSTR_WORD1_SRC_EXTNUM__MASK;
}
#define INSTR_WORD1_SRC0_TYPE__MASK				0x07000000
#define INSTR_WORD1_SRC0_TYPE__SHIFT				24
static inline uint32_t INSTR_WORD1_SRC0_TYPE(enum of_instr_src val)
{
	return ((val) << INSTR_WORD1_SRC0_TYPE__SHIFT) & INSTR_WORD1_SRC0_TYPE__MASK;
}
#define INSTR_WORD1_SRC_AR_CHAN__MASK				0x18000000
#define INSTR_WORD1_SRC_AR_CHAN__SHIFT				27
static inline uint32_t INSTR_WORD1_SRC_AR_CHAN(uint32_t val)
{
	return ((val) << INSTR_WORD1_SRC_AR_CHAN__SHIFT) & INSTR_WORD1_SRC_AR_CHAN__MASK;
}
#define INSTR_WORD1_SRC0_AR					0x20000000
#define INSTR_WORD1_SRC0_NEGATE					0x40000000
#define INSTR_WORD1_SRC0_ABS					0x80000000

#define REG_INSTR_WORD2						0x00000002
#define INSTR_WORD2_SRC0_SWIZZLE__MASK				0x000000ff
#define INSTR_WORD2_SRC0_SWIZZLE__SHIFT				0
static inline uint32_t INSTR_WORD2_SRC0_SWIZZLE(uint32_t val)
{
	return ((val) << INSTR_WORD2_SRC0_SWIZZLE__SHIFT) & INSTR_WORD2_SRC0_SWIZZLE__MASK;
}
#define ALU_WORD2_DST_NUM__MASK					0x00001f00
#define ALU_WORD2_DST_NUM__SHIFT				8
static inline uint32_t ALU_WORD2_DST_NUM(uint32_t val)
{
	return ((val) << ALU_WORD2_DST_NUM__SHIFT) & ALU_WORD2_DST_NUM__MASK;
}
#define ALU_WORD2_DST_TYPE__MASK				0x0000e000
#define ALU_WORD2_DST_TYPE__SHIFT				13
static inline uint32_t ALU_WORD2_DST_TYPE(enum of_instr_dst val)
{
	return ((val) << ALU_WORD2_DST_TYPE__SHIFT) & ALU_WORD2_DST_TYPE__MASK;
}
#define ALU_WORD2_DST_A						0x00010000
#define ALU_WORD2_DST_SAT					0x00020000
#define CF_WORD2_JUMP_OFFS__MASK				0x0000ff00
#define CF_WORD2_JUMP_OFFS__SHIFT				8
static inline uint32_t CF_WORD2_JUMP_OFFS(uint32_t val)
{
	return ((val) << CF_WORD2_JUMP_OFFS__SHIFT) & CF_WORD2_JUMP_OFFS__MASK;
}
#define CF_WORD2_JUMP_BACK					0x00010000
#define ALU_WORD2_DST_MASK__MASK				0x00780000
#define ALU_WORD2_DST_MASK__SHIFT				19
static inline uint32_t ALU_WORD2_DST_MASK(uint32_t val)
{
	return ((val) << ALU_WORD2_DST_MASK__SHIFT) & ALU_WORD2_DST_MASK__MASK;
}
#define INSTR_WORD2_OPCODE__MASK				0x1f800000
#define INSTR_WORD2_OPCODE__SHIFT				23
static inline uint32_t INSTR_WORD2_OPCODE(uint32_t val)
{
	return ((val) << INSTR_WORD2_OPCODE__SHIFT) & INSTR_WORD2_OPCODE__MASK;
}
#define INSTR_WORD2_NEXT_3SRC					0x20000000


#endif /* FIMG_3DSE_XML */
