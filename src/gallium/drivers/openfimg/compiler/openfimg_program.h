/*
 * Copyright (C) 2013-2014 Tomasz Figa <tomasz.figa@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef OF_PROGRAM_H_
#define OF_PROGRAM_H_

#include "pipe/p_context.h"

#include "openfimg_context.h"

#include "openfimg_ir.h"
#include "openfimg_emit.h"
#include "openfimg_state.h"

/** Structure representing a single semantic attribute. */
struct of_shader_semantic {
	unsigned name	:8;	/**< Semantic type identifier */
	unsigned index	:16;	/**< Index inside the same semantic type */
	unsigned row	:8;	/**< Index of attribute inside the same semantic */
};

/** Structure containing shader state object for driver's pipe context. */
struct of_shader_stateobj {
	struct of_cso cso;

	enum of_shader_type type;	/**< Shader type (vertex/pixel). */

	struct pipe_resource *buffer;	/**< Buffer containing binary code. */
	unsigned num_instrs;		/**< Number of instruction words. */

	struct tgsi_token *tokens;	/**< TGSI tokens. */
	uint32_t hash;			/**< Hash of TGSI tokens. */

	struct of_ir_shader *ir;	/**< Intermediate representation. */

	unsigned first_immediate;	/**< First constant register used for immediates. */
	unsigned num_immediates;	/**< Number of floating point scalar immediates. */
	uint32_t *immediates;		/**< Buffer with immediate values. */

	/** Array of shader input semantics. */
	struct of_shader_semantic in_semantics[OF_MAX_ATTRIBS];
	unsigned num_inputs;	/**< Number of inputs. */

	/** Array of shader output semantics. */
	struct of_shader_semantic out_semantics[OF_MAX_ATTRIBS];
	unsigned num_outputs;	/**< Number of outputs. */
};

/** Shader program header as generated by proprietary shader compiler. */
struct of_shader_binary_header {
	uint32_t magic;
	uint32_t version;
	uint32_t header_size; /**< Offset to shader binary in bytes. */
	uint32_t fimg_version;

	uint32_t instruct_size; /**< Number of instruction words. */
	uint32_t const_float_size; /**< Number of used const float vectors. */
	uint32_t const_int_size;
	uint32_t const_bool_size;

	uint32_t in_table_size;
	uint32_t out_table_size;
	uint32_t uniform_table_size;
	uint32_t sam_table_size;

	uint32_t reserved[6];
};

/**
 * Prepares the program for emission and emits it to hardware ring.
 * This function might trigger (re)compilation and (re)assembly of the program
 * in order to prepare binary code to emit to hardware.
 * @param ctx Driver's pipe context.
 * @param so Shader state object to emit.
 */
void of_program_emit(struct of_context *ctx, struct of_shader_stateobj *so,
		     bool reassemble);
/**
 * Determines mapping between vertex shader outputs and pixel shader inputs
 * and emits necessary state to hardware.
 * @param ctx Driver's pipe context.
 * @param vp Shader state object of vertex program.
 * @param fp Shader state object of fragment program (for pixel shader).
 */
void of_program_link(struct of_context *ctx, struct of_shader_stateobj *vp,
		     struct of_shader_stateobj *fp);

/**
 * Creates utility shader program for solid fill purposes.
 * @param ctx Driver's pipe context.
 */
void of_program_init_solid(struct of_context *ctx);
/**
 * Creates utility shader program for image blit purposes.
 * @param ctx Driver's pipe context.
 */
void of_program_init_blit(struct of_context *ctx);

/**
 * Initialized program state of a pipe context.
 * @param pctx Gallium pipe context to initialize.
 */
void of_program_init(struct pipe_context *pctx);
/**
 * Destroys program state of a pipe context.
 * @param pctx Gallium pipe context to destroy.
 */
void of_program_fini(struct pipe_context *pctx);

extern struct of_shader_stateobj of_cso_dummy_vp;
extern struct of_shader_stateobj of_cso_dummy_fp;

#endif /* OF_PROGRAM_H_ */
